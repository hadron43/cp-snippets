{
	"Competetive Programming": {
		"prefix": "_cp",
		"body": [
			"/*",
			" * @hadron43, Expert soon",
			" * Good luck!",
			" */",
			"#include <bits/stdc++.h>",
			"using namespace std;",
			"",
			"#define modulo (int)(1e9 + 7)",
			"#define maxsize (int)(2e5)",
			"typedef long long ll;",
			"",
			"// vector<ll> arr;",
			"// map<ll, ll> m;",
			"ll T, n, in;",
			"",
			"void solve() {",
			"\t$0",
			"}",
			"",
			"int main() {",
				"\tios_base::sync_with_stdio(false);",
				"\tcin.tie(NULL);",
				"\tcin>>T;",
				"\tfor(int t=0; t<T; ++t) {",
					"\t\tcin>>n;",
					"\t\tsolve();",
				"\t}",
			"}",
			""
		],
		"description": "cp boiler code"
	},

	"Binary Exponentiation": {
		"prefix": "_binpow",
		"body": [
			"ll binpow(ll a, ll b) {",
				"\ta %= modulo;",
				"\tll res = 1;",
				"\twhile (b > 0) {",
					"\t\tif (b & 1)",
						"\t\t\tres = res * a % modulo;",
					"\t\ta = a * a % modulo;",
					"\t\tb >>= 1;",
				"\t}",
				"\treturn res;",
			"}",
			""
		],
		"description": "Binary Exponentiation With Modulo"
	},

	"Modular Inverse": {
		"prefix": "_modinv",
		"body": [
			"ll modinv(ll a) { return binpow(a, modulo-2); }\n"
		],
		"description": "Modular Inverse Algorithm"
	},

	"Greatest Common Divisor" : {
		"prefix": "_gcd",
		"body": "ll gcd(ll a, ll b) { if (a == 0) return b; return gcd(b % a, a); }\n",
		"description": "Euclid Algorithm for returning the gcd of two integers"
	},

	"Merge Sort" : {
		"prefix": "_mergesort",
		"body":
		[
			"void merge(vector<ll> &v, int l, int r, int mid) {",
			"    vector<ll> vt;",
			"    int i = l, j = mid;",
			"    while(i<mid && j<r)",
			"        if(v[i] <= v[j])",
			"            vt.push_back(v[i++]);",
			"        else {",
			"            vt.push_back(v[j++]);",
			"//            inversions += (mid - i);",
			"        }",
			"",
			"    while(i < mid)",
			"        vt.push_back(v[i++]);",
			"    while(j < r)",
			"        vt.push_back(v[j++]);",
			"",
			"    for(int i=0; i<vt.size(); ++i)",
			"        v[i+l] = vt[i];",
			"}",
			"",
			"void mergesort(vector<ll> &v, int l, int r) {",
			"    if(l+1 >= r)",
			"        return;",
			"    int mid = (l+r) / 2;",
			"    mergesort(v, l, mid);",
			"    mergesort(v, mid, r);",
			"    merge(v, l, r, mid);",
			"}",
		],		
		"description": "Divide and Conquer algorithm for sorting an array"
	},

	"Segment Tree" : {
		"prefix": "_seg_tree",
		"body": [
			"struct seg_tree {",
			"    int n;",
			"    vector<int> t;",
			"",
			"    void build(vector<int> a, int v, int tl, int tr) {",
			"        t.resize(4*a.size());",
			"        if (tl == tr) {",
			"            t[v] = a[tl];",
			"        } else {",
			"            int tm = (tl + tr) / 2;",
			"            build(a, v*2, tl, tm);",
			"            build(a, v*2+1, tm+1, tr);",
			"            t[v] = t[v*2] + t[v*2+1];",
			"        }",
			"    }",
			"",
			"    int sum(int v, int tl, int tr, int l, int r) {",
			"        if (l > r) ",
			"            return 0;",
			"        if (l == tl && r == tr) {",
			"            return t[v];",
			"        }",
			"        int tm = (tl + tr) / 2;",
			"        return sum(v*2, tl, tm, l, min(r, tm))",
			"            + sum(v*2+1, tm+1, tr, max(l, tm+1), r);",
			"    }",
			"",
			"    void update(int v, int tl, int tr, int pos, int new_val) {",
			"        if (tl == tr) {",
			"            t[v] = new_val;",
			"        } else {",
			"            int tm = (tl + tr) / 2;",
			"            if (pos <= tm)",
			"                update(v*2, tl, tm, pos, new_val);",
			"            else",
			"                update(v*2+1, tm+1, tr, pos, new_val);",
			"            t[v] = t[v*2] + t[v*2+1];",
			"        }",
			"    }",
			"};",
			""
		],
		"description": "Segment Tree from cp-algorithms.com"
	}
}
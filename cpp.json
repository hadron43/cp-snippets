{
	"Competetive Programming": {
		"prefix": "_cp",
		"body": [
			"/*",
			" * @hadron43, Expert soon",
			" * Good luck!",
			" */",
			"#include <bits/stdc++.h>",
			"using namespace std;",
			"",
			"#define modulo 1000000007",
			"#define maxsize 200000",
			"typedef long long ll;",
			"",
			"// vector<ll> arr;",
			"// map<ll, ll> m;",
			"ll T, n, in;",
			"",
			"void solve() {",
			"\t$0",
			"}",
			"",
			"int main() {",
				"\tcin>>T;",
				"\tfor(int t=0; t<T; ++t) {",
					"\t\tcin>>n;",
					"\t\tsolve();",
				"\t}",
			"}",
			""
		],
		"description": "cp boiler code"
	},

	"Binary Exponentiation": {
		"prefix": "_binpow",
		"body": [
			"ll binpow(ll a, ll b) {",
				"\ta %= modulo;",
				"\tll res = 1;",
				"\twhile (b > 0) {",
					"\t\tif (b & 1)",
						"\t\t\tres = res * a % modulo;",
					"\t\ta = a * a % modulo;",
					"\t\tb >>= 1;",
				"\t}",
				"\treturn res;",
			"}",
			""
		],
		"description": "Binary Exponentiation With Modulo"
	},

	"Modular Inverse": {
		"prefix": "_modinv",
		"body": [
			"ll modinv(ll a) { return binpow(a, modulo-2); }\n"
		],
		"description": "Modular Inverse Algorithm"
	},

	"Greatest Common Divisor" : {
		"prefix": "_gcd",
		"body": "ll gcd(ll a, ll b) { if (a == 0) return b; return gcd(b % a, a); }\n",
		"description": "Euclid Algorithm for returning the gcd of two integers"
	}
}